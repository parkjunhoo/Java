package jdbc.board.exam.copy;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class BoardDAOImpl implements BoardDAO {

	private String dbUrl;
	private String dbUser;
	private String dbPassword;

	public BoardDAOImpl() {
		this.dbUrl = "jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC";
		this.dbUser = "exam";
		this.dbPassword = "exam";
	}

	public BoardDAOImpl(String dbUrl, String dbUser, String dbPassword) {
		this.dbUrl = dbUrl;
		this.dbUser = dbUser;
		this.dbPassword = dbPassword;
	}

	@Override
	public int insert(String id, String title, String content) {
		int result = 0;
		Connection con = null;
		PreparedStatement st = null;

		BoardVO board = new BoardVO(id, title, content);

		String sql = "insert into tb_board " + "values(null,?,?,?,sysdate(),0)";

		try {
			con = DBUtil.getConnect(dbUrl, dbUser, dbPassword);
			st = con.prepareStatement(sql);

			st.setString(1, board.getId());
			st.setString(2, board.getTitle());
			st.setString(3, board.getContent());

			result = st.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.close(con, st, null);
		}

		return result;
	}

	@Override
	public int update(String id, int boardNum, String title, String content) {
		int result = 0;
		Connection con = null;
		PreparedStatement st = null;

		String sql = "update tb_board " + "set title = ? , content = ? " + "where id = ? and boardNum = ?";

		try {
			con = DBUtil.getConnect(dbUrl, dbUser, dbPassword);
			st = con.prepareStatement(sql);

			st.setString(1, title);
			st.setString(2, content);
			st.setString(3, id);
			st.setInt(4, boardNum);

			result = st.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.close(con, st, null);
		}

		return result;
	}

	@Override
	public int delete(int boardNum) {
		int result = 0;
		Connection con = null;
		PreparedStatement st = null;

		String sql = "delete from tb_board where boardNum = ?";

		try {
			con = DBUtil.getConnect(dbUrl, dbUser, dbPassword);
			st = con.prepareStatement(sql);

			st.setInt(1, boardNum);

			result = st.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.close(con, st, null);
		}

		return result;
	}

	@Override
	public ArrayList<BoardVO> selectAll() {
		String sql = "select * from tb_board";

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		BoardVO board = null;
		ArrayList<BoardVO> boards = new ArrayList<BoardVO>();
		try {
			conn = DBUtil.getConnect(dbUrl, dbUser, dbPassword);
			ps = conn.prepareStatement(sql);

			rs = ps.executeQuery();
			while (rs.next()) {
				board = new BoardVO(rs.getString(2), rs.getString(3), rs.getString(4), rs.getDate(5), rs.getInt(6),
						rs.getInt(1));
				boards.add(board);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.close(conn, ps, rs);
		}

		return boards;
	}

	@Override
	public ArrayList<BoardVO> selectByTitle(String title) {
		String sql = "select * from tb_board where id like '%?%'";

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		BoardVO board = null;
		ArrayList<BoardVO> boards = new ArrayList<BoardVO>();
		try {
			conn = DBUtil.getConnect(dbUrl, dbUser, dbPassword);
			ps = conn.prepareStatement(sql);
			ps.setString(1, title);
			rs = ps.executeQuery();
			while (rs.next()) {
				board = new BoardVO(rs.getString(1), rs.getString(2), rs.getString(3), rs.getDate(4), rs.getInt(5));
				boards.add(board);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.close(conn, ps, rs);
		}

		return boards;
	}

	@Override
	public ArrayList<BoardVO> SelectByBoardNum(int boardNum) {
		String sql = "select * from tb_board where boardNum = ?";

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		BoardVO board = null;
		ArrayList<BoardVO> boards = new ArrayList<BoardVO>();
		try {
			conn = DBUtil.getConnect(dbUrl, dbUser, dbPassword);
			ps = conn.prepareStatement(sql);
			ps.setInt(1, boardNum);
			rs = ps.executeQuery();
			while (rs.next()) {
				board = new BoardVO(rs.getString(1), rs.getString(2), rs.getString(3), rs.getDate(4), rs.getInt(5));
				boards.add(board);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.close(conn, ps, rs);
		}

		return boards;
	}

}
